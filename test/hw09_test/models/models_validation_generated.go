// Code generated by go-validate tool. DO NOT EDIT.
package models

import (
	"errors"
	"regexp"
)

type ValidationError struct {
	Field string
	Error error
}

// Validate validates fields of User struct.
func (u User) Validate() ([]ValidationError, error) {
	var vErrs []ValidationError

	if len(u.ID) != 36 {
		vErrs = append(vErrs, ValidationError{
			Field: "ID",
			Error: errors.New("length of ID must be 36 characters"),
		})
	}

	if u.Age < 18 {
		vErrs = append(vErrs, ValidationError{
			Field: "Age",
			Error: errors.New("Age must be greater than 18"),
		})
	}

	if u.Age > 50 {
		vErrs = append(vErrs, ValidationError{
			Field: "Age",
			Error: errors.New("Age must be less than 50"),
		})
	}

	re, err := regexp.Compile("^\\w+@\\w+\\.\\w+$")
	if err != nil {
		return vErrs, err
	}
	if !re.Match([]byte(u.Email)) {
		vErrs = append(vErrs, ValidationError{
			Field: "Email",
			Error: errors.New(`Email is not matching regexp "^\\w+@\\w+\\.\\w+$"`),
		})
	}

	return vErrs, nil
}

// Validate validates fields of App struct.
func (a App) Validate() ([]ValidationError, error) {
	var vErrs []ValidationError

	if len(a.Version) != 5 {
		vErrs = append(vErrs, ValidationError{
			Field: "Version",
			Error: errors.New("length of Version must be 5 characters"),
		})
	}

	return vErrs, nil
}

// Validate validates fields of Response struct.
func (r Response) Validate() ([]ValidationError, error) {
	var vErrs []ValidationError

	// Code in(200,404,500)

	return vErrs, nil
}
